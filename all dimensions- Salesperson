

import pandas as pd
import matplotlib
import pymysql
## import sql_queries

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, String, Integer, Date
from sqlalchemy.sql import *
from datetime import datetime
from sqlalchemy import Float
from sqlalchemy import Column, String, Integer, ForeignKey, SmallInteger, Numeric



conn = pymysql.connect(
    host="prod.tcsrv.net",
    port=int("3306"),
    user="username",
    passwd="password",
    db="",
    charset='utf8mb4')


conn1 = pymysql.connect(
    host="bi-server.tcsrv.net",
    port=int("3306"),
    user="username",
    passwd="password",
    db="sales",
    charset='utf8mb4')

cursor= conn1.cursor()



dim_salesperson= pd.read_sql_query('SELECT u.user_id, firstname, lastname, u.user_group_id, ug.name '
                  'from opencart.user u LEFT JOIN opencart.user_group ug on u.user_group_id= ug.user_group_id ' 
                  'where ug.name not like "%cus%" ', conn)
dim_salesperson.rename(columns= {'user_id': 'salesperson_id', 'firstname': 'first_name', 'lastname': 'last_name'}, inplace= True)
dim_salesperson


sm_insert= """INSERT INTO dim_salesperson (salesperson_id, first_name, last_name, user_group_id, name) 
                    VALUES (%s, %s, %s, %s, %s)"""

max= pd.read_sql_query('SELECT max(salesperson_id)'
                  'from sales.dim_salesperson ', conn1).values[0][0]

#print(dim_salesperson.dtypes)

for i in dim_salesperson.index:

    if dim_salesperson.get_value(i, 'salesperson_id') >max:
        s_id = dim_salesperson.get_value(i, 'salesperson_id')
        s_fname = dim_salesperson.get_value(i, 'first_name')
        s_lname = dim_salesperson.get_value(i, 'last_name')
        s_gp = dim_salesperson.get_value(i, 'user_group_id')
        s_gname = dim_salesperson.get_value(i, 'name')

        # print(type(e_id), type(e_country_id))
        cursor.execute(sm_insert, (int(s_id), s_fname, s_lname, int(s_gp), s_gname))
        conn1.commit()


conn.close()
conn1.close()
